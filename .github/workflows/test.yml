name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  unit-and-integration-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    strategy:
      matrix:
        node-version: [18, 20]

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Create test environment file
      run: |
        cat > .env.local << EOF
        NEXTAUTH_SECRET=test-secret-for-ci
        NEXTAUTH_URL=http://localhost:3000
        GITHUB_CLIENT_ID=test-client-id
        GITHUB_CLIENT_SECRET=test-client-secret
        DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_db
        EOF

    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432 -U test_user; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done

    - name: Run linting
      run: npm run lint

    - name: Run unit tests
      run: npm run test:unit

    - name: Run integration tests
      run: npm run test:integration

    - name: Generate coverage report
      run: npm run test:coverage

    - name: Upload coverage to artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-node-${{ matrix.node-version }}
        path: coverage/

  e2e-tests:
    runs-on: ubuntu-latest
    needs: unit-and-integration-tests
    
    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps

    - name: Create test environment file
      run: |
        cat > .env.local << EOF
        NEXTAUTH_SECRET=test-secret-for-ci
        NEXTAUTH_URL=http://localhost:3000
        GITHUB_CLIENT_ID=test-client-id
        GITHUB_CLIENT_SECRET=test-client-secret
        DATABASE_URL=postgresql://test:test@localhost:5432/test_db
        EOF

    - name: Run Playwright tests
      run: npm run test:e2e

    - name: Upload Playwright report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

  build-test:
    runs-on: ubuntu-latest
    needs: unit-and-integration-tests
    
    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Create production environment file
      run: |
        cat > .env.local << EOF
        NEXTAUTH_SECRET=test-secret-for-ci
        NEXTAUTH_URL=http://localhost:3000
        GITHUB_CLIENT_ID=test-client-id
        GITHUB_CLIENT_SECRET=test-client-secret
        DATABASE_URL=postgresql://test:test@localhost:5432/test_db
        EOF

    - name: Build application
      run: npm run build

    - name: Start application
      run: npm start &
      env:
        NODE_ENV: production

    - name: Wait for application to start
      run: |
        timeout 30 bash -c 'until curl -f http://localhost:3000/api/health/db; do sleep 2; done'

    - name: Test production build
      run: |
        response=$(curl -s http://localhost:3000)
        echo "Response: $response"
        if [[ "$response" == *"CodeFlow"* ]]; then
          echo "✅ Production build test passed"
        else
          echo "❌ Production build test failed"
          exit 1
        fi